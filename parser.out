Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> all
Rule 1     all -> create
Rule 2     all -> use
Rule 3     all -> load
Rule 4     all -> drop
Rule 5     all -> select
Rule 6     all -> cdb
Rule 7     all -> schema
Rule 8     all -> dblist
Rule 9     all -> exit
Rule 10    create -> CREATE DATABASE ID SEMI
Rule 11    dblist -> LIST DATABASE SEMI
Rule 12    cdb -> CURRENT DATABASE SEMI
Rule 13    schema -> SCHEMA DATABASE ID SEMI
Rule 14    schema -> SCHEMA CURRENT DATABASE SEMI
Rule 15    schema -> SCHEMA TABLE ID SEMI
Rule 16    use -> USE ID SEMI
Rule 17    load -> LOAD ID AS ID LPAREN column_dtypes RPAREN SEMI
Rule 18    column_dtypes -> column_dtypes COMMA column_dtype
Rule 19    column_dtypes -> column_dtype
Rule 20    column_dtype -> ID COLON dtype
Rule 21    dtype -> INT
Rule 22    dtype -> FLOAT
Rule 23    dtype -> STR
Rule 24    drop -> DROP DATABASE ID SEMI
Rule 25    drop -> DROP TABLE ID SEMI
Rule 26    select -> SELECT columns FROM ID WHERE logical_not_expression SEMI
Rule 27    columns -> columns COMMA column
Rule 28    columns -> column
Rule 29    column -> MAX LPAREN ID RPAREN
Rule 30    column -> COUNT LPAREN ID RPAREN
Rule 31    column -> SUM LPAREN ID RPAREN
Rule 32    column -> ID
Rule 33    column -> MAX LPAREN ID RPAREN AS ID
Rule 34    column -> COUNT LPAREN ID RPAREN AS ID
Rule 35    column -> SUM LPAREN ID RPAREN AS ID
Rule 36    column -> ID AS ID
Rule 37    logical_not_expression -> logical_or_expression
Rule 38    logical_not_expression -> NOT logical_not_expression
Rule 39    logical_or_expression -> logical_and_expression
Rule 40    logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 41    logical_and_expression -> equality_expression
Rule 42    logical_and_expression -> logical_and_expression AND equality_expression
Rule 43    equality_expression -> relational_expression
Rule 44    equality_expression -> equality_expression EQ relational_expression
Rule 45    equality_expression -> equality_expression EQUALS relational_expression
Rule 46    equality_expression -> equality_expression NE relational_expression
Rule 47    relational_expression -> additive_expression
Rule 48    relational_expression -> relational_expression LT additive_expression
Rule 49    relational_expression -> relational_expression GT additive_expression
Rule 50    relational_expression -> relational_expression LE additive_expression
Rule 51    relational_expression -> relational_expression GE additive_expression
Rule 52    additive_expression -> multiplicative_expression
Rule 53    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 54    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 55    multiplicative_expression -> val
Rule 56    multiplicative_expression -> multiplicative_expression TIMES val
Rule 57    multiplicative_expression -> multiplicative_expression DIVIDE val
Rule 58    multiplicative_expression -> multiplicative_expression MOD val
Rule 59    val -> ID
Rule 60    val -> ICONST
Rule 61    val -> FCONST
Rule 62    val -> SCONST
Rule 63    exit -> EXIT LPAREN RPAREN
Rule 64    exit -> QUIT LPAREN RPAREN
Rule 65    exit -> EXIT LPAREN RPAREN SEMI
Rule 66    exit -> QUIT LPAREN RPAREN SEMI

Terminals, with rules where they appear

AND                  : 42
AS                   : 17 33 34 35 36
COLON                : 20
COMMA                : 18 27
COUNT                : 30 34
CREATE               : 10
CURRENT              : 12 14
DATABASE             : 10 11 12 13 14 24
DIVIDE               : 57
DROP                 : 24 25
EQ                   : 44
EQUALS               : 45
EXIT                 : 63 65
FCONST               : 61
FLOAT                : 22
FROM                 : 26
GE                   : 51
GT                   : 49
ICONST               : 60
ID                   : 10 13 15 16 17 17 20 24 25 26 29 30 31 32 33 33 34 34 35 35 36 36 59
INT                  : 21
LE                   : 50
LIST                 : 11
LOAD                 : 17
LPAREN               : 17 29 30 31 33 34 35 63 64 65 66
LT                   : 48
MAX                  : 29 33
MINUS                : 54
MOD                  : 58
NE                   : 46
NOT                  : 38
OR                   : 40
PLUS                 : 53
QUIT                 : 64 66
RPAREN               : 17 29 30 31 33 34 35 63 64 65 66
SCHEMA               : 13 14 15
SCONST               : 62
SELECT               : 26
SEMI                 : 10 11 12 13 14 15 16 17 24 25 26 65 66
STR                  : 23
SUM                  : 31 35
TABLE                : 15 25
TIMES                : 56
USE                  : 16
WHERE                : 26
error                : 

Nonterminals, with rules where they appear

additive_expression  : 47 48 49 50 51 53 54
all                  : 0
cdb                  : 6
column               : 27 28
column_dtype         : 18 19
column_dtypes        : 17 18
columns              : 26 27
create               : 1
dblist               : 8
drop                 : 4
dtype                : 20
equality_expression  : 41 42 44 45 46
exit                 : 9
load                 : 3
logical_and_expression : 39 40 42
logical_not_expression : 26 38
logical_or_expression : 37 40
multiplicative_expression : 52 53 54 56 57 58
relational_expression : 43 44 45 46 48 49 50 51
schema               : 7
select               : 5
use                  : 2
val                  : 55 56 57 58

Parsing method: LALR

state 0

    (0) S' -> . all
    (1) all -> . create
    (2) all -> . use
    (3) all -> . load
    (4) all -> . drop
    (5) all -> . select
    (6) all -> . cdb
    (7) all -> . schema
    (8) all -> . dblist
    (9) all -> . exit
    (10) create -> . CREATE DATABASE ID SEMI
    (16) use -> . USE ID SEMI
    (17) load -> . LOAD ID AS ID LPAREN column_dtypes RPAREN SEMI
    (24) drop -> . DROP DATABASE ID SEMI
    (25) drop -> . DROP TABLE ID SEMI
    (26) select -> . SELECT columns FROM ID WHERE logical_not_expression SEMI
    (12) cdb -> . CURRENT DATABASE SEMI
    (13) schema -> . SCHEMA DATABASE ID SEMI
    (14) schema -> . SCHEMA CURRENT DATABASE SEMI
    (15) schema -> . SCHEMA TABLE ID SEMI
    (11) dblist -> . LIST DATABASE SEMI
    (63) exit -> . EXIT LPAREN RPAREN
    (64) exit -> . QUIT LPAREN RPAREN
    (65) exit -> . EXIT LPAREN RPAREN SEMI
    (66) exit -> . QUIT LPAREN RPAREN SEMI

    CREATE          shift and go to state 11
    USE             shift and go to state 12
    LOAD            shift and go to state 13
    DROP            shift and go to state 14
    SELECT          shift and go to state 15
    CURRENT         shift and go to state 16
    SCHEMA          shift and go to state 17
    LIST            shift and go to state 18
    EXIT            shift and go to state 19
    QUIT            shift and go to state 20

    all                            shift and go to state 1
    create                         shift and go to state 2
    use                            shift and go to state 3
    load                           shift and go to state 4
    drop                           shift and go to state 5
    select                         shift and go to state 6
    cdb                            shift and go to state 7
    schema                         shift and go to state 8
    dblist                         shift and go to state 9
    exit                           shift and go to state 10

state 1

    (0) S' -> all .



state 2

    (1) all -> create .

    $end            reduce using rule 1 (all -> create .)


state 3

    (2) all -> use .

    $end            reduce using rule 2 (all -> use .)


state 4

    (3) all -> load .

    $end            reduce using rule 3 (all -> load .)


state 5

    (4) all -> drop .

    $end            reduce using rule 4 (all -> drop .)


state 6

    (5) all -> select .

    $end            reduce using rule 5 (all -> select .)


state 7

    (6) all -> cdb .

    $end            reduce using rule 6 (all -> cdb .)


state 8

    (7) all -> schema .

    $end            reduce using rule 7 (all -> schema .)


state 9

    (8) all -> dblist .

    $end            reduce using rule 8 (all -> dblist .)


state 10

    (9) all -> exit .

    $end            reduce using rule 9 (all -> exit .)


state 11

    (10) create -> CREATE . DATABASE ID SEMI

    DATABASE        shift and go to state 21


state 12

    (16) use -> USE . ID SEMI

    ID              shift and go to state 22


state 13

    (17) load -> LOAD . ID AS ID LPAREN column_dtypes RPAREN SEMI

    ID              shift and go to state 23


state 14

    (24) drop -> DROP . DATABASE ID SEMI
    (25) drop -> DROP . TABLE ID SEMI

    DATABASE        shift and go to state 24
    TABLE           shift and go to state 25


state 15

    (26) select -> SELECT . columns FROM ID WHERE logical_not_expression SEMI
    (27) columns -> . columns COMMA column
    (28) columns -> . column
    (29) column -> . MAX LPAREN ID RPAREN
    (30) column -> . COUNT LPAREN ID RPAREN
    (31) column -> . SUM LPAREN ID RPAREN
    (32) column -> . ID
    (33) column -> . MAX LPAREN ID RPAREN AS ID
    (34) column -> . COUNT LPAREN ID RPAREN AS ID
    (35) column -> . SUM LPAREN ID RPAREN AS ID
    (36) column -> . ID AS ID

    MAX             shift and go to state 29
    COUNT           shift and go to state 30
    SUM             shift and go to state 31
    ID              shift and go to state 27

    columns                        shift and go to state 26
    column                         shift and go to state 28

state 16

    (12) cdb -> CURRENT . DATABASE SEMI

    DATABASE        shift and go to state 32


state 17

    (13) schema -> SCHEMA . DATABASE ID SEMI
    (14) schema -> SCHEMA . CURRENT DATABASE SEMI
    (15) schema -> SCHEMA . TABLE ID SEMI

    DATABASE        shift and go to state 33
    CURRENT         shift and go to state 34
    TABLE           shift and go to state 35


state 18

    (11) dblist -> LIST . DATABASE SEMI

    DATABASE        shift and go to state 36


state 19

    (63) exit -> EXIT . LPAREN RPAREN
    (65) exit -> EXIT . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 37


state 20

    (64) exit -> QUIT . LPAREN RPAREN
    (66) exit -> QUIT . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 38


state 21

    (10) create -> CREATE DATABASE . ID SEMI

    ID              shift and go to state 39


state 22

    (16) use -> USE ID . SEMI

    SEMI            shift and go to state 40


state 23

    (17) load -> LOAD ID . AS ID LPAREN column_dtypes RPAREN SEMI

    AS              shift and go to state 41


state 24

    (24) drop -> DROP DATABASE . ID SEMI

    ID              shift and go to state 42


state 25

    (25) drop -> DROP TABLE . ID SEMI

    ID              shift and go to state 43


state 26

    (26) select -> SELECT columns . FROM ID WHERE logical_not_expression SEMI
    (27) columns -> columns . COMMA column

    FROM            shift and go to state 44
    COMMA           shift and go to state 45


state 27

    (32) column -> ID .
    (36) column -> ID . AS ID

    FROM            reduce using rule 32 (column -> ID .)
    COMMA           reduce using rule 32 (column -> ID .)
    AS              shift and go to state 46


state 28

    (28) columns -> column .

    FROM            reduce using rule 28 (columns -> column .)
    COMMA           reduce using rule 28 (columns -> column .)


state 29

    (29) column -> MAX . LPAREN ID RPAREN
    (33) column -> MAX . LPAREN ID RPAREN AS ID

    LPAREN          shift and go to state 47


state 30

    (30) column -> COUNT . LPAREN ID RPAREN
    (34) column -> COUNT . LPAREN ID RPAREN AS ID

    LPAREN          shift and go to state 48


state 31

    (31) column -> SUM . LPAREN ID RPAREN
    (35) column -> SUM . LPAREN ID RPAREN AS ID

    LPAREN          shift and go to state 49


state 32

    (12) cdb -> CURRENT DATABASE . SEMI

    SEMI            shift and go to state 50


state 33

    (13) schema -> SCHEMA DATABASE . ID SEMI

    ID              shift and go to state 51


state 34

    (14) schema -> SCHEMA CURRENT . DATABASE SEMI

    DATABASE        shift and go to state 52


state 35

    (15) schema -> SCHEMA TABLE . ID SEMI

    ID              shift and go to state 53


state 36

    (11) dblist -> LIST DATABASE . SEMI

    SEMI            shift and go to state 54


state 37

    (63) exit -> EXIT LPAREN . RPAREN
    (65) exit -> EXIT LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 55


state 38

    (64) exit -> QUIT LPAREN . RPAREN
    (66) exit -> QUIT LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 56


state 39

    (10) create -> CREATE DATABASE ID . SEMI

    SEMI            shift and go to state 57


state 40

    (16) use -> USE ID SEMI .

    $end            reduce using rule 16 (use -> USE ID SEMI .)


state 41

    (17) load -> LOAD ID AS . ID LPAREN column_dtypes RPAREN SEMI

    ID              shift and go to state 58


state 42

    (24) drop -> DROP DATABASE ID . SEMI

    SEMI            shift and go to state 59


state 43

    (25) drop -> DROP TABLE ID . SEMI

    SEMI            shift and go to state 60


state 44

    (26) select -> SELECT columns FROM . ID WHERE logical_not_expression SEMI

    ID              shift and go to state 61


state 45

    (27) columns -> columns COMMA . column
    (29) column -> . MAX LPAREN ID RPAREN
    (30) column -> . COUNT LPAREN ID RPAREN
    (31) column -> . SUM LPAREN ID RPAREN
    (32) column -> . ID
    (33) column -> . MAX LPAREN ID RPAREN AS ID
    (34) column -> . COUNT LPAREN ID RPAREN AS ID
    (35) column -> . SUM LPAREN ID RPAREN AS ID
    (36) column -> . ID AS ID

    MAX             shift and go to state 29
    COUNT           shift and go to state 30
    SUM             shift and go to state 31
    ID              shift and go to state 27

    column                         shift and go to state 62

state 46

    (36) column -> ID AS . ID

    ID              shift and go to state 63


state 47

    (29) column -> MAX LPAREN . ID RPAREN
    (33) column -> MAX LPAREN . ID RPAREN AS ID

    ID              shift and go to state 64


state 48

    (30) column -> COUNT LPAREN . ID RPAREN
    (34) column -> COUNT LPAREN . ID RPAREN AS ID

    ID              shift and go to state 65


state 49

    (31) column -> SUM LPAREN . ID RPAREN
    (35) column -> SUM LPAREN . ID RPAREN AS ID

    ID              shift and go to state 66


state 50

    (12) cdb -> CURRENT DATABASE SEMI .

    $end            reduce using rule 12 (cdb -> CURRENT DATABASE SEMI .)


state 51

    (13) schema -> SCHEMA DATABASE ID . SEMI

    SEMI            shift and go to state 67


state 52

    (14) schema -> SCHEMA CURRENT DATABASE . SEMI

    SEMI            shift and go to state 68


state 53

    (15) schema -> SCHEMA TABLE ID . SEMI

    SEMI            shift and go to state 69


state 54

    (11) dblist -> LIST DATABASE SEMI .

    $end            reduce using rule 11 (dblist -> LIST DATABASE SEMI .)


state 55

    (63) exit -> EXIT LPAREN RPAREN .
    (65) exit -> EXIT LPAREN RPAREN . SEMI

    $end            reduce using rule 63 (exit -> EXIT LPAREN RPAREN .)
    SEMI            shift and go to state 70


state 56

    (64) exit -> QUIT LPAREN RPAREN .
    (66) exit -> QUIT LPAREN RPAREN . SEMI

    $end            reduce using rule 64 (exit -> QUIT LPAREN RPAREN .)
    SEMI            shift and go to state 71


state 57

    (10) create -> CREATE DATABASE ID SEMI .

    $end            reduce using rule 10 (create -> CREATE DATABASE ID SEMI .)


state 58

    (17) load -> LOAD ID AS ID . LPAREN column_dtypes RPAREN SEMI

    LPAREN          shift and go to state 72


state 59

    (24) drop -> DROP DATABASE ID SEMI .

    $end            reduce using rule 24 (drop -> DROP DATABASE ID SEMI .)


state 60

    (25) drop -> DROP TABLE ID SEMI .

    $end            reduce using rule 25 (drop -> DROP TABLE ID SEMI .)


state 61

    (26) select -> SELECT columns FROM ID . WHERE logical_not_expression SEMI

    WHERE           shift and go to state 73


state 62

    (27) columns -> columns COMMA column .

    FROM            reduce using rule 27 (columns -> columns COMMA column .)
    COMMA           reduce using rule 27 (columns -> columns COMMA column .)


state 63

    (36) column -> ID AS ID .

    FROM            reduce using rule 36 (column -> ID AS ID .)
    COMMA           reduce using rule 36 (column -> ID AS ID .)


state 64

    (29) column -> MAX LPAREN ID . RPAREN
    (33) column -> MAX LPAREN ID . RPAREN AS ID

    RPAREN          shift and go to state 74


state 65

    (30) column -> COUNT LPAREN ID . RPAREN
    (34) column -> COUNT LPAREN ID . RPAREN AS ID

    RPAREN          shift and go to state 75


state 66

    (31) column -> SUM LPAREN ID . RPAREN
    (35) column -> SUM LPAREN ID . RPAREN AS ID

    RPAREN          shift and go to state 76


state 67

    (13) schema -> SCHEMA DATABASE ID SEMI .

    $end            reduce using rule 13 (schema -> SCHEMA DATABASE ID SEMI .)


state 68

    (14) schema -> SCHEMA CURRENT DATABASE SEMI .

    $end            reduce using rule 14 (schema -> SCHEMA CURRENT DATABASE SEMI .)


state 69

    (15) schema -> SCHEMA TABLE ID SEMI .

    $end            reduce using rule 15 (schema -> SCHEMA TABLE ID SEMI .)


state 70

    (65) exit -> EXIT LPAREN RPAREN SEMI .

    $end            reduce using rule 65 (exit -> EXIT LPAREN RPAREN SEMI .)


state 71

    (66) exit -> QUIT LPAREN RPAREN SEMI .

    $end            reduce using rule 66 (exit -> QUIT LPAREN RPAREN SEMI .)


state 72

    (17) load -> LOAD ID AS ID LPAREN . column_dtypes RPAREN SEMI
    (18) column_dtypes -> . column_dtypes COMMA column_dtype
    (19) column_dtypes -> . column_dtype
    (20) column_dtype -> . ID COLON dtype

    ID              shift and go to state 77

    column_dtypes                  shift and go to state 78
    column_dtype                   shift and go to state 79

state 73

    (26) select -> SELECT columns FROM ID WHERE . logical_not_expression SEMI
    (37) logical_not_expression -> . logical_or_expression
    (38) logical_not_expression -> . NOT logical_not_expression
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (41) logical_and_expression -> . equality_expression
    (42) logical_and_expression -> . logical_and_expression AND equality_expression
    (43) equality_expression -> . relational_expression
    (44) equality_expression -> . equality_expression EQ relational_expression
    (45) equality_expression -> . equality_expression EQUALS relational_expression
    (46) equality_expression -> . equality_expression NE relational_expression
    (47) relational_expression -> . additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression GT additive_expression
    (50) relational_expression -> . relational_expression LE additive_expression
    (51) relational_expression -> . relational_expression GE additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    NOT             shift and go to state 83
    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    logical_not_expression         shift and go to state 81
    logical_or_expression          shift and go to state 82
    logical_and_expression         shift and go to state 84
    equality_expression            shift and go to state 85
    relational_expression          shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 74

    (29) column -> MAX LPAREN ID RPAREN .
    (33) column -> MAX LPAREN ID RPAREN . AS ID

    FROM            reduce using rule 29 (column -> MAX LPAREN ID RPAREN .)
    COMMA           reduce using rule 29 (column -> MAX LPAREN ID RPAREN .)
    AS              shift and go to state 93


state 75

    (30) column -> COUNT LPAREN ID RPAREN .
    (34) column -> COUNT LPAREN ID RPAREN . AS ID

    FROM            reduce using rule 30 (column -> COUNT LPAREN ID RPAREN .)
    COMMA           reduce using rule 30 (column -> COUNT LPAREN ID RPAREN .)
    AS              shift and go to state 94


state 76

    (31) column -> SUM LPAREN ID RPAREN .
    (35) column -> SUM LPAREN ID RPAREN . AS ID

    FROM            reduce using rule 31 (column -> SUM LPAREN ID RPAREN .)
    COMMA           reduce using rule 31 (column -> SUM LPAREN ID RPAREN .)
    AS              shift and go to state 95


state 77

    (20) column_dtype -> ID . COLON dtype

    COLON           shift and go to state 96


state 78

    (17) load -> LOAD ID AS ID LPAREN column_dtypes . RPAREN SEMI
    (18) column_dtypes -> column_dtypes . COMMA column_dtype

    RPAREN          shift and go to state 97
    COMMA           shift and go to state 98


state 79

    (19) column_dtypes -> column_dtype .

    RPAREN          reduce using rule 19 (column_dtypes -> column_dtype .)
    COMMA           reduce using rule 19 (column_dtypes -> column_dtype .)


state 80

    (59) val -> ID .

    TIMES           reduce using rule 59 (val -> ID .)
    DIVIDE          reduce using rule 59 (val -> ID .)
    MOD             reduce using rule 59 (val -> ID .)
    PLUS            reduce using rule 59 (val -> ID .)
    MINUS           reduce using rule 59 (val -> ID .)
    LT              reduce using rule 59 (val -> ID .)
    GT              reduce using rule 59 (val -> ID .)
    LE              reduce using rule 59 (val -> ID .)
    GE              reduce using rule 59 (val -> ID .)
    EQ              reduce using rule 59 (val -> ID .)
    EQUALS          reduce using rule 59 (val -> ID .)
    NE              reduce using rule 59 (val -> ID .)
    AND             reduce using rule 59 (val -> ID .)
    OR              reduce using rule 59 (val -> ID .)
    SEMI            reduce using rule 59 (val -> ID .)


state 81

    (26) select -> SELECT columns FROM ID WHERE logical_not_expression . SEMI

    SEMI            shift and go to state 99


state 82

    (37) logical_not_expression -> logical_or_expression .
    (40) logical_or_expression -> logical_or_expression . OR logical_and_expression

    SEMI            reduce using rule 37 (logical_not_expression -> logical_or_expression .)
    OR              shift and go to state 100


state 83

    (38) logical_not_expression -> NOT . logical_not_expression
    (37) logical_not_expression -> . logical_or_expression
    (38) logical_not_expression -> . NOT logical_not_expression
    (39) logical_or_expression -> . logical_and_expression
    (40) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (41) logical_and_expression -> . equality_expression
    (42) logical_and_expression -> . logical_and_expression AND equality_expression
    (43) equality_expression -> . relational_expression
    (44) equality_expression -> . equality_expression EQ relational_expression
    (45) equality_expression -> . equality_expression EQUALS relational_expression
    (46) equality_expression -> . equality_expression NE relational_expression
    (47) relational_expression -> . additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression GT additive_expression
    (50) relational_expression -> . relational_expression LE additive_expression
    (51) relational_expression -> . relational_expression GE additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    NOT             shift and go to state 83
    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    logical_not_expression         shift and go to state 101
    logical_or_expression          shift and go to state 82
    logical_and_expression         shift and go to state 84
    equality_expression            shift and go to state 85
    relational_expression          shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 84

    (39) logical_or_expression -> logical_and_expression .
    (42) logical_and_expression -> logical_and_expression . AND equality_expression

    OR              reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 39 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 102


state 85

    (41) logical_and_expression -> equality_expression .
    (44) equality_expression -> equality_expression . EQ relational_expression
    (45) equality_expression -> equality_expression . EQUALS relational_expression
    (46) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 41 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 41 (logical_and_expression -> equality_expression .)
    SEMI            reduce using rule 41 (logical_and_expression -> equality_expression .)
    EQ              shift and go to state 103
    EQUALS          shift and go to state 104
    NE              shift and go to state 105


state 86

    (43) equality_expression -> relational_expression .
    (48) relational_expression -> relational_expression . LT additive_expression
    (49) relational_expression -> relational_expression . GT additive_expression
    (50) relational_expression -> relational_expression . LE additive_expression
    (51) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 43 (equality_expression -> relational_expression .)
    EQUALS          reduce using rule 43 (equality_expression -> relational_expression .)
    NE              reduce using rule 43 (equality_expression -> relational_expression .)
    AND             reduce using rule 43 (equality_expression -> relational_expression .)
    OR              reduce using rule 43 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 43 (equality_expression -> relational_expression .)
    LT              shift and go to state 106
    GT              shift and go to state 107
    LE              shift and go to state 108
    GE              shift and go to state 109


state 87

    (47) relational_expression -> additive_expression .
    (53) additive_expression -> additive_expression . PLUS multiplicative_expression
    (54) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 47 (relational_expression -> additive_expression .)
    GT              reduce using rule 47 (relational_expression -> additive_expression .)
    LE              reduce using rule 47 (relational_expression -> additive_expression .)
    GE              reduce using rule 47 (relational_expression -> additive_expression .)
    EQ              reduce using rule 47 (relational_expression -> additive_expression .)
    EQUALS          reduce using rule 47 (relational_expression -> additive_expression .)
    NE              reduce using rule 47 (relational_expression -> additive_expression .)
    AND             reduce using rule 47 (relational_expression -> additive_expression .)
    OR              reduce using rule 47 (relational_expression -> additive_expression .)
    SEMI            reduce using rule 47 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111


state 88

    (52) additive_expression -> multiplicative_expression .
    (56) multiplicative_expression -> multiplicative_expression . TIMES val
    (57) multiplicative_expression -> multiplicative_expression . DIVIDE val
    (58) multiplicative_expression -> multiplicative_expression . MOD val

    PLUS            reduce using rule 52 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 52 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 52 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 52 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 52 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 52 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 52 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 52 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 52 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 52 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 52 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 52 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114


state 89

    (55) multiplicative_expression -> val .

    TIMES           reduce using rule 55 (multiplicative_expression -> val .)
    DIVIDE          reduce using rule 55 (multiplicative_expression -> val .)
    MOD             reduce using rule 55 (multiplicative_expression -> val .)
    PLUS            reduce using rule 55 (multiplicative_expression -> val .)
    MINUS           reduce using rule 55 (multiplicative_expression -> val .)
    LT              reduce using rule 55 (multiplicative_expression -> val .)
    GT              reduce using rule 55 (multiplicative_expression -> val .)
    LE              reduce using rule 55 (multiplicative_expression -> val .)
    GE              reduce using rule 55 (multiplicative_expression -> val .)
    EQ              reduce using rule 55 (multiplicative_expression -> val .)
    EQUALS          reduce using rule 55 (multiplicative_expression -> val .)
    NE              reduce using rule 55 (multiplicative_expression -> val .)
    AND             reduce using rule 55 (multiplicative_expression -> val .)
    OR              reduce using rule 55 (multiplicative_expression -> val .)
    SEMI            reduce using rule 55 (multiplicative_expression -> val .)


state 90

    (60) val -> ICONST .

    TIMES           reduce using rule 60 (val -> ICONST .)
    DIVIDE          reduce using rule 60 (val -> ICONST .)
    MOD             reduce using rule 60 (val -> ICONST .)
    PLUS            reduce using rule 60 (val -> ICONST .)
    MINUS           reduce using rule 60 (val -> ICONST .)
    LT              reduce using rule 60 (val -> ICONST .)
    GT              reduce using rule 60 (val -> ICONST .)
    LE              reduce using rule 60 (val -> ICONST .)
    GE              reduce using rule 60 (val -> ICONST .)
    EQ              reduce using rule 60 (val -> ICONST .)
    EQUALS          reduce using rule 60 (val -> ICONST .)
    NE              reduce using rule 60 (val -> ICONST .)
    AND             reduce using rule 60 (val -> ICONST .)
    OR              reduce using rule 60 (val -> ICONST .)
    SEMI            reduce using rule 60 (val -> ICONST .)


state 91

    (61) val -> FCONST .

    TIMES           reduce using rule 61 (val -> FCONST .)
    DIVIDE          reduce using rule 61 (val -> FCONST .)
    MOD             reduce using rule 61 (val -> FCONST .)
    PLUS            reduce using rule 61 (val -> FCONST .)
    MINUS           reduce using rule 61 (val -> FCONST .)
    LT              reduce using rule 61 (val -> FCONST .)
    GT              reduce using rule 61 (val -> FCONST .)
    LE              reduce using rule 61 (val -> FCONST .)
    GE              reduce using rule 61 (val -> FCONST .)
    EQ              reduce using rule 61 (val -> FCONST .)
    EQUALS          reduce using rule 61 (val -> FCONST .)
    NE              reduce using rule 61 (val -> FCONST .)
    AND             reduce using rule 61 (val -> FCONST .)
    OR              reduce using rule 61 (val -> FCONST .)
    SEMI            reduce using rule 61 (val -> FCONST .)


state 92

    (62) val -> SCONST .

    TIMES           reduce using rule 62 (val -> SCONST .)
    DIVIDE          reduce using rule 62 (val -> SCONST .)
    MOD             reduce using rule 62 (val -> SCONST .)
    PLUS            reduce using rule 62 (val -> SCONST .)
    MINUS           reduce using rule 62 (val -> SCONST .)
    LT              reduce using rule 62 (val -> SCONST .)
    GT              reduce using rule 62 (val -> SCONST .)
    LE              reduce using rule 62 (val -> SCONST .)
    GE              reduce using rule 62 (val -> SCONST .)
    EQ              reduce using rule 62 (val -> SCONST .)
    EQUALS          reduce using rule 62 (val -> SCONST .)
    NE              reduce using rule 62 (val -> SCONST .)
    AND             reduce using rule 62 (val -> SCONST .)
    OR              reduce using rule 62 (val -> SCONST .)
    SEMI            reduce using rule 62 (val -> SCONST .)


state 93

    (33) column -> MAX LPAREN ID RPAREN AS . ID

    ID              shift and go to state 115


state 94

    (34) column -> COUNT LPAREN ID RPAREN AS . ID

    ID              shift and go to state 116


state 95

    (35) column -> SUM LPAREN ID RPAREN AS . ID

    ID              shift and go to state 117


state 96

    (20) column_dtype -> ID COLON . dtype
    (21) dtype -> . INT
    (22) dtype -> . FLOAT
    (23) dtype -> . STR

    INT             shift and go to state 119
    FLOAT           shift and go to state 120
    STR             shift and go to state 121

    dtype                          shift and go to state 118

state 97

    (17) load -> LOAD ID AS ID LPAREN column_dtypes RPAREN . SEMI

    SEMI            shift and go to state 122


state 98

    (18) column_dtypes -> column_dtypes COMMA . column_dtype
    (20) column_dtype -> . ID COLON dtype

    ID              shift and go to state 77

    column_dtype                   shift and go to state 123

state 99

    (26) select -> SELECT columns FROM ID WHERE logical_not_expression SEMI .

    $end            reduce using rule 26 (select -> SELECT columns FROM ID WHERE logical_not_expression SEMI .)


state 100

    (40) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (41) logical_and_expression -> . equality_expression
    (42) logical_and_expression -> . logical_and_expression AND equality_expression
    (43) equality_expression -> . relational_expression
    (44) equality_expression -> . equality_expression EQ relational_expression
    (45) equality_expression -> . equality_expression EQUALS relational_expression
    (46) equality_expression -> . equality_expression NE relational_expression
    (47) relational_expression -> . additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression GT additive_expression
    (50) relational_expression -> . relational_expression LE additive_expression
    (51) relational_expression -> . relational_expression GE additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    logical_and_expression         shift and go to state 124
    equality_expression            shift and go to state 85
    relational_expression          shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 101

    (38) logical_not_expression -> NOT logical_not_expression .

    SEMI            reduce using rule 38 (logical_not_expression -> NOT logical_not_expression .)


state 102

    (42) logical_and_expression -> logical_and_expression AND . equality_expression
    (43) equality_expression -> . relational_expression
    (44) equality_expression -> . equality_expression EQ relational_expression
    (45) equality_expression -> . equality_expression EQUALS relational_expression
    (46) equality_expression -> . equality_expression NE relational_expression
    (47) relational_expression -> . additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression GT additive_expression
    (50) relational_expression -> . relational_expression LE additive_expression
    (51) relational_expression -> . relational_expression GE additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    equality_expression            shift and go to state 125
    relational_expression          shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 103

    (44) equality_expression -> equality_expression EQ . relational_expression
    (47) relational_expression -> . additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression GT additive_expression
    (50) relational_expression -> . relational_expression LE additive_expression
    (51) relational_expression -> . relational_expression GE additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    relational_expression          shift and go to state 126
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 104

    (45) equality_expression -> equality_expression EQUALS . relational_expression
    (47) relational_expression -> . additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression GT additive_expression
    (50) relational_expression -> . relational_expression LE additive_expression
    (51) relational_expression -> . relational_expression GE additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    relational_expression          shift and go to state 127
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 105

    (46) equality_expression -> equality_expression NE . relational_expression
    (47) relational_expression -> . additive_expression
    (48) relational_expression -> . relational_expression LT additive_expression
    (49) relational_expression -> . relational_expression GT additive_expression
    (50) relational_expression -> . relational_expression LE additive_expression
    (51) relational_expression -> . relational_expression GE additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    relational_expression          shift and go to state 128
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 106

    (48) relational_expression -> relational_expression LT . additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    additive_expression            shift and go to state 129
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 107

    (49) relational_expression -> relational_expression GT . additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    additive_expression            shift and go to state 130
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 108

    (50) relational_expression -> relational_expression LE . additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    additive_expression            shift and go to state 131
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 109

    (51) relational_expression -> relational_expression GE . additive_expression
    (52) additive_expression -> . multiplicative_expression
    (53) additive_expression -> . additive_expression PLUS multiplicative_expression
    (54) additive_expression -> . additive_expression MINUS multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    additive_expression            shift and go to state 132
    multiplicative_expression      shift and go to state 88
    val                            shift and go to state 89

state 110

    (53) additive_expression -> additive_expression PLUS . multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    multiplicative_expression      shift and go to state 133
    val                            shift and go to state 89

state 111

    (54) additive_expression -> additive_expression MINUS . multiplicative_expression
    (55) multiplicative_expression -> . val
    (56) multiplicative_expression -> . multiplicative_expression TIMES val
    (57) multiplicative_expression -> . multiplicative_expression DIVIDE val
    (58) multiplicative_expression -> . multiplicative_expression MOD val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    multiplicative_expression      shift and go to state 134
    val                            shift and go to state 89

state 112

    (56) multiplicative_expression -> multiplicative_expression TIMES . val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    val                            shift and go to state 135

state 113

    (57) multiplicative_expression -> multiplicative_expression DIVIDE . val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    val                            shift and go to state 136

state 114

    (58) multiplicative_expression -> multiplicative_expression MOD . val
    (59) val -> . ID
    (60) val -> . ICONST
    (61) val -> . FCONST
    (62) val -> . SCONST

    ID              shift and go to state 80
    ICONST          shift and go to state 90
    FCONST          shift and go to state 91
    SCONST          shift and go to state 92

    val                            shift and go to state 137

state 115

    (33) column -> MAX LPAREN ID RPAREN AS ID .

    FROM            reduce using rule 33 (column -> MAX LPAREN ID RPAREN AS ID .)
    COMMA           reduce using rule 33 (column -> MAX LPAREN ID RPAREN AS ID .)


state 116

    (34) column -> COUNT LPAREN ID RPAREN AS ID .

    FROM            reduce using rule 34 (column -> COUNT LPAREN ID RPAREN AS ID .)
    COMMA           reduce using rule 34 (column -> COUNT LPAREN ID RPAREN AS ID .)


state 117

    (35) column -> SUM LPAREN ID RPAREN AS ID .

    FROM            reduce using rule 35 (column -> SUM LPAREN ID RPAREN AS ID .)
    COMMA           reduce using rule 35 (column -> SUM LPAREN ID RPAREN AS ID .)


state 118

    (20) column_dtype -> ID COLON dtype .

    RPAREN          reduce using rule 20 (column_dtype -> ID COLON dtype .)
    COMMA           reduce using rule 20 (column_dtype -> ID COLON dtype .)


state 119

    (21) dtype -> INT .

    RPAREN          reduce using rule 21 (dtype -> INT .)
    COMMA           reduce using rule 21 (dtype -> INT .)


state 120

    (22) dtype -> FLOAT .

    RPAREN          reduce using rule 22 (dtype -> FLOAT .)
    COMMA           reduce using rule 22 (dtype -> FLOAT .)


state 121

    (23) dtype -> STR .

    RPAREN          reduce using rule 23 (dtype -> STR .)
    COMMA           reduce using rule 23 (dtype -> STR .)


state 122

    (17) load -> LOAD ID AS ID LPAREN column_dtypes RPAREN SEMI .

    $end            reduce using rule 17 (load -> LOAD ID AS ID LPAREN column_dtypes RPAREN SEMI .)


state 123

    (18) column_dtypes -> column_dtypes COMMA column_dtype .

    RPAREN          reduce using rule 18 (column_dtypes -> column_dtypes COMMA column_dtype .)
    COMMA           reduce using rule 18 (column_dtypes -> column_dtypes COMMA column_dtype .)


state 124

    (40) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (42) logical_and_expression -> logical_and_expression . AND equality_expression

    OR              reduce using rule 40 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    SEMI            reduce using rule 40 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 102


state 125

    (42) logical_and_expression -> logical_and_expression AND equality_expression .
    (44) equality_expression -> equality_expression . EQ relational_expression
    (45) equality_expression -> equality_expression . EQUALS relational_expression
    (46) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 42 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 42 (logical_and_expression -> logical_and_expression AND equality_expression .)
    SEMI            reduce using rule 42 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQ              shift and go to state 103
    EQUALS          shift and go to state 104
    NE              shift and go to state 105


state 126

    (44) equality_expression -> equality_expression EQ relational_expression .
    (48) relational_expression -> relational_expression . LT additive_expression
    (49) relational_expression -> relational_expression . GT additive_expression
    (50) relational_expression -> relational_expression . LE additive_expression
    (51) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 44 (equality_expression -> equality_expression EQ relational_expression .)
    EQUALS          reduce using rule 44 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 44 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 44 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 44 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 44 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 106
    GT              shift and go to state 107
    LE              shift and go to state 108
    GE              shift and go to state 109


state 127

    (45) equality_expression -> equality_expression EQUALS relational_expression .
    (48) relational_expression -> relational_expression . LT additive_expression
    (49) relational_expression -> relational_expression . GT additive_expression
    (50) relational_expression -> relational_expression . LE additive_expression
    (51) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 45 (equality_expression -> equality_expression EQUALS relational_expression .)
    EQUALS          reduce using rule 45 (equality_expression -> equality_expression EQUALS relational_expression .)
    NE              reduce using rule 45 (equality_expression -> equality_expression EQUALS relational_expression .)
    AND             reduce using rule 45 (equality_expression -> equality_expression EQUALS relational_expression .)
    OR              reduce using rule 45 (equality_expression -> equality_expression EQUALS relational_expression .)
    SEMI            reduce using rule 45 (equality_expression -> equality_expression EQUALS relational_expression .)
    LT              shift and go to state 106
    GT              shift and go to state 107
    LE              shift and go to state 108
    GE              shift and go to state 109


state 128

    (46) equality_expression -> equality_expression NE relational_expression .
    (48) relational_expression -> relational_expression . LT additive_expression
    (49) relational_expression -> relational_expression . GT additive_expression
    (50) relational_expression -> relational_expression . LE additive_expression
    (51) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 46 (equality_expression -> equality_expression NE relational_expression .)
    EQUALS          reduce using rule 46 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 46 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 46 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 46 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 46 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 106
    GT              shift and go to state 107
    LE              shift and go to state 108
    GE              shift and go to state 109


state 129

    (48) relational_expression -> relational_expression LT additive_expression .
    (53) additive_expression -> additive_expression . PLUS multiplicative_expression
    (54) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    LE              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    GE              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    EQUALS          reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    NE              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    AND             reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    OR              reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    SEMI            reduce using rule 48 (relational_expression -> relational_expression LT additive_expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111


state 130

    (49) relational_expression -> relational_expression GT additive_expression .
    (53) additive_expression -> additive_expression . PLUS multiplicative_expression
    (54) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    LE              reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    GE              reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    EQUALS          reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    NE              reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    AND             reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    OR              reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    SEMI            reduce using rule 49 (relational_expression -> relational_expression GT additive_expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111


state 131

    (50) relational_expression -> relational_expression LE additive_expression .
    (53) additive_expression -> additive_expression . PLUS multiplicative_expression
    (54) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    GT              reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    GE              reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    EQUALS          reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    AND             reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    OR              reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    SEMI            reduce using rule 50 (relational_expression -> relational_expression LE additive_expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111


state 132

    (51) relational_expression -> relational_expression GE additive_expression .
    (53) additive_expression -> additive_expression . PLUS multiplicative_expression
    (54) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    GT              reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    GE              reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    EQUALS          reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    AND             reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    OR              reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    SEMI            reduce using rule 51 (relational_expression -> relational_expression GE additive_expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111


state 133

    (53) additive_expression -> additive_expression PLUS multiplicative_expression .
    (56) multiplicative_expression -> multiplicative_expression . TIMES val
    (57) multiplicative_expression -> multiplicative_expression . DIVIDE val
    (58) multiplicative_expression -> multiplicative_expression . MOD val

    PLUS            reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUALS          reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 53 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114


state 134

    (54) additive_expression -> additive_expression MINUS multiplicative_expression .
    (56) multiplicative_expression -> multiplicative_expression . TIMES val
    (57) multiplicative_expression -> multiplicative_expression . DIVIDE val
    (58) multiplicative_expression -> multiplicative_expression . MOD val

    PLUS            reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS          reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 54 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MOD             shift and go to state 114


state 135

    (56) multiplicative_expression -> multiplicative_expression TIMES val .

    TIMES           reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    DIVIDE          reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    MOD             reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    PLUS            reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    MINUS           reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    LT              reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    GT              reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    LE              reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    GE              reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    EQ              reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    EQUALS          reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    NE              reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    AND             reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    OR              reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)
    SEMI            reduce using rule 56 (multiplicative_expression -> multiplicative_expression TIMES val .)


state 136

    (57) multiplicative_expression -> multiplicative_expression DIVIDE val .

    TIMES           reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    DIVIDE          reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    MOD             reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    PLUS            reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    MINUS           reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    LT              reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    GT              reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    LE              reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    GE              reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    EQ              reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    EQUALS          reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    NE              reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    AND             reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    OR              reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)
    SEMI            reduce using rule 57 (multiplicative_expression -> multiplicative_expression DIVIDE val .)


state 137

    (58) multiplicative_expression -> multiplicative_expression MOD val .

    TIMES           reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    DIVIDE          reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    MOD             reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    PLUS            reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    MINUS           reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    LT              reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    GT              reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    LE              reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    GE              reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    EQ              reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    EQUALS          reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    NE              reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    AND             reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    OR              reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)
    SEMI            reduce using rule 58 (multiplicative_expression -> multiplicative_expression MOD val .)

